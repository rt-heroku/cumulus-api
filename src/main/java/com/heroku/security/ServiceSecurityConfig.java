/*
 * Created on 2018-09-11 ( Time 21:38:57 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.heroku.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.core.annotation.Order;

@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)
@EnableWebSecurity
@ComponentScan("co.rtapps.security")
@Order(99999)
public class ServiceSecurityConfig extends WebSecurityConfigurerAdapter {
	@Autowired
	private UserDetailsService userDetailsService;

	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.cors().and().httpBasic().and().authorizeRequests()
			.antMatchers("/user/**").hasAuthority("ROLE_ADMIN")
			.antMatchers(HttpMethod.POST,"/user/add").hasAnyAuthority("ROLE_ADMIN")
			.antMatchers(HttpMethod.DELETE,"/user/**").hasAnyAuthority("ROLE_ADMIN")
			.antMatchers("/**").hasAnyAuthority("ROLE_USER","ROLE_ADMIN")
/*
* Generated for each one of the end points
* Uncomment for more control
*/
/*

                .antMatchers(HttpMethod.GET, "/accounts/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.POST, "/accounts/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.PUT, "/accounts/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.DELETE, "/accounts/**").hasAnyAuthority("ROLE_USER")

                .antMatchers(HttpMethod.GET, "/dkomoffers/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.POST, "/dkomoffers/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.PUT, "/dkomoffers/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.DELETE, "/dkomoffers/**").hasAnyAuthority("ROLE_USER")

                .antMatchers(HttpMethod.GET, "/finservfinancialgoals/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.POST, "/finservfinancialgoals/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.PUT, "/finservfinancialgoals/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.DELETE, "/finservfinancialgoals/**").hasAnyAuthority("ROLE_USER")
*/
/*
* Generated for each one of the end points
* Uncomment for more control.
*/
/*

                .antMatchers(HttpMethod.GET, "/api/v1/account/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.POST, "/api/v1/account/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.PUT, "/api/v1/account/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.DELETE, "/api/v1/account/**").hasAnyAuthority("ROLE_USER")

                .antMatchers(HttpMethod.GET, "/api/v1/dkomoffer/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.POST, "/api/v1/dkomoffer/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.PUT, "/api/v1/dkomoffer/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.DELETE, "/api/v1/dkomoffer/**").hasAnyAuthority("ROLE_USER")

                .antMatchers(HttpMethod.GET, "/api/v1/finservfinancialgoal/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.POST, "/api/v1/finservfinancialgoal/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.PUT, "/api/v1/finservfinancialgoal/**").hasAnyAuthority("ROLE_USER")
                .antMatchers(HttpMethod.DELETE, "/api/v1/finservfinancialgoal/**").hasAnyAuthority("ROLE_USER")
*/
			.anyRequest().authenticated().and().csrf().disable();
	}

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());
	}

}
