/*
 * Created on 2018-09-24 ( Time 11:58:14 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.heroku.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.entities.Accounttransaction;
import com.heroku.exceptions.AccounttransactionNotFoundException;
import com.heroku.repository.AccounttransactionRepository;

@Service
@Transactional(rollbackFor=AccounttransactionNotFoundException.class)
public class AccounttransactionService 
{
	private static Logger logger = LoggerFactory.getLogger(AccounttransactionService.class);
	
	@Autowired
	private AccounttransactionRepository accounttransactionRepository;
		
	/*
	 * READ methods
	 */
	public Page<Accounttransaction> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("AccounttransactionService -> findAll Accounttransactions");
		
		return accounttransactionRepository.findAll(PageRequest.of(page, count));
	}

	public Iterable<Accounttransaction> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("AccounttransactionService -> findAll Accounttransactions");
		
		return accounttransactionRepository.findAll();
	}
/*
	public Accounttransaction findBySfid(String accounttransaction){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Accounttransaction with sfid:" + accounttransaction);
		
		return accounttransactionRepository.findBySfid(accounttransaction);
		
	}
*/
	public Accounttransaction get(long id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Accounttransaction with id:" + id);
		
		Accounttransaction elementToGet = accounttransactionRepository.findById(id).get();
		
		if (elementToGet == null)
			throw new AccounttransactionNotFoundException(id);
		
		return elementToGet;
	}

	public Accounttransaction create(Accounttransaction accounttransaction) {

		if (logger.isDebugEnabled())
			logger.debug("AccounttransactionService -> create:" + accounttransaction);
			
		return accounttransactionRepository.save(accounttransaction);
	}

	public Accounttransaction update(Accounttransaction accounttransaction) {
		
		if (logger.isDebugEnabled())
			logger.debug("AccounttransactionService -> create:" + accounttransaction);

		Accounttransaction elementToUpdate = accounttransactionRepository.findById(accounttransaction.getId()).get();
		
		if (elementToUpdate == null)
			throw new AccounttransactionNotFoundException(accounttransaction.getName());
		
		elementToUpdate.update(accounttransaction);
		accounttransactionRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public Accounttransaction delete(Long id) {
		if (logger.isDebugEnabled())
			logger.debug("AccounttransactionService -> delete:" + id);

		Accounttransaction elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new AccounttransactionNotFoundException(id);
		
		accounttransactionRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

