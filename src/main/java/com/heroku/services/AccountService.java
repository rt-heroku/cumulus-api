/*
 * Created on 2018-09-11 ( Time 21:38:57 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.heroku.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.entities.Account;
import com.heroku.exceptions.AccountNotFoundException;
import com.heroku.repository.AccountRepository;

@Service
@Transactional(rollbackFor=AccountNotFoundException.class)
public class AccountService 
{
	private static Logger logger = LoggerFactory.getLogger(AccountService.class);
	
	@Autowired
	private AccountRepository accountRepository;
		
	/*
	 * READ methods
	 */
	public Page<Account> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("AccountService -> findAll Accounts");
		
		return accountRepository.findAll(PageRequest.of(page, count));
	}

	public Iterable<Account> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("AccountService -> findAll Accounts");
		
		return accountRepository.findAll();
	}
/*
	public Account findBySfid(String account){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Account with sfid:" + account);
		
		return accountRepository.findBySfid(account);
		
	}
*/
	public Account get(Long id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Account with id:" + id);
		
		Account elementToGet = accountRepository.findById(id).get();
		
		if (elementToGet == null)
			throw new AccountNotFoundException(id);
		
		return elementToGet;
	}

	public Account create(Account account) {

		if (logger.isDebugEnabled())
			logger.debug("AccountService -> create:" + account);
			
		return accountRepository.save(account);
	}

	public Account update(Account account) {
		
		if (logger.isDebugEnabled())
			logger.debug("AccountService -> create:" + account);

		Account elementToUpdate = accountRepository.findById(account.getId()).get();
		
		if (elementToUpdate == null)
			throw new AccountNotFoundException(account.getName());
		
		elementToUpdate.update(account);
		accountRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public Account delete(Long id) {
		if (logger.isDebugEnabled())
			logger.debug("AccountService -> delete:" + id);

		Account elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new AccountNotFoundException(id);
		
		accountRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

