/*
 * Created on 2018-09-11 ( Time 21:38:57 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.heroku.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.entities.Offer;
import com.heroku.exceptions.OfferNotFoundException;
import com.heroku.repository.OfferRepository;

@Service
@Transactional(rollbackFor=OfferNotFoundException.class)
public class OfferService 
{
	private static Logger logger = LoggerFactory.getLogger(OfferService.class);
	
	@Autowired
	private OfferRepository dkomofferRepository;
		
	/*
	 * READ methods
	 */
	public Page<Offer> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("OfferService -> findAll DkomOffers");
		
		return dkomofferRepository.findAll(PageRequest.of(page, count));
	}

	public Iterable<Offer> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("OfferService -> findAll DkomOffers");
		
		return dkomofferRepository.findAll();
	}
/*
	public Offer findBySfid(String dkomoffer){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Offer with sfid:" + dkomoffer);
		
		return dkomofferRepository.findBySfid(dkomoffer);
		
	}
*/
	public Offer get(Long id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving Offer with id:" + id);
		
		Offer elementToGet = dkomofferRepository.findById(id).get();
		
		if (elementToGet == null)
			throw new OfferNotFoundException(id);
		
		return elementToGet;
	}

	public Offer create(Offer dkomoffer) {

		if (logger.isDebugEnabled())
			logger.debug("OfferService -> create:" + dkomoffer);
			
		return dkomofferRepository.save(dkomoffer);
	}

	public Offer update(Offer dkomoffer) {
		
		if (logger.isDebugEnabled())
			logger.debug("OfferService -> create:" + dkomoffer);

		Offer elementToUpdate = dkomofferRepository.findById(dkomoffer.getId()).get();
		
		if (elementToUpdate == null)
			throw new OfferNotFoundException(dkomoffer.getName());
		
		elementToUpdate.update(dkomoffer);
		dkomofferRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public Offer delete(Long id) {
		if (logger.isDebugEnabled())
			logger.debug("OfferService -> delete:" + id);

		Offer elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new OfferNotFoundException(id);
		
		dkomofferRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

