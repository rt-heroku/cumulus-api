/*
 * Created on 2018-09-20 ( Time 17:58:42 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.heroku.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.entities.GoalDetails;
import com.heroku.exceptions.GoalDetailsNotFoundException;
import com.heroku.repository.GoalDetailsRepository;

@Service
@Transactional(rollbackFor=GoalDetailsNotFoundException.class)
public class GoalDetailsService 
{
	private static Logger logger = LoggerFactory.getLogger(GoalDetailsService.class);
	
	@Autowired
	private GoalDetailsRepository goaldetailsRepository;
		
	/*
	 * READ methods
	 */
	public Page<GoalDetails> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("GoalDetailsService -> findAll GoalDetailss");
		
		return goaldetailsRepository.findAll(PageRequest.of(page, count));
	}

	public Iterable<GoalDetails> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("GoalDetailsService -> findAll GoalDetailss");
		
		return goaldetailsRepository.findAll();
	}

	public Iterable<GoalDetails> findByGoal(String goalid) {
		
		if (logger.isDebugEnabled())
			logger.debug("GoalDetailsService -> findAll GoalDetailss");
		
		return goaldetailsRepository.findByGoalid(goalid);
	}


	public GoalDetails get(long id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving GoalDetails with id:" + id);
		
		GoalDetails elementToGet = goaldetailsRepository.findById(id).get();
		
		if (elementToGet == null)
			throw new GoalDetailsNotFoundException(id);
		
		return elementToGet;
	}

	public GoalDetails create(GoalDetails goaldetails) {

		if (logger.isDebugEnabled())
			logger.debug("GoalDetailsService -> create:" + goaldetails);
			
		return goaldetailsRepository.save(goaldetails);
	}

	public GoalDetails update(GoalDetails goaldetails) {
		
		if (logger.isDebugEnabled())
			logger.debug("GoalDetailsService -> create:" + goaldetails);

		GoalDetails elementToUpdate = goaldetailsRepository.findById(goaldetails.getId()).get();
		
		if (elementToUpdate == null)
			throw new GoalDetailsNotFoundException(goaldetails.toString());
		
		elementToUpdate.update(goaldetails);
		goaldetailsRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public GoalDetails delete(Long id) {
		if (logger.isDebugEnabled())
			logger.debug("GoalDetailsService -> delete:" + id);

		GoalDetails elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new GoalDetailsNotFoundException(id);
		
		goaldetailsRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

