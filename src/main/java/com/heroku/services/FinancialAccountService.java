/*
 * Created on 2018-09-24 ( Time 11:58:14 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */

package com.heroku.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.entities.FinancialAccount;
import com.heroku.exceptions.FinancialAccountNotFoundException;
import com.heroku.repository.FinancialAccountRepository;

@Service
@Transactional(rollbackFor=FinancialAccountNotFoundException.class)
public class FinancialAccountService 
{
	private static Logger logger = LoggerFactory.getLogger(FinancialAccountService.class);
	
	@Autowired
	private FinancialAccountRepository financialaccountRepository;
		
//	@Autowired
//	private AccounttransactionRepository accounttransactionRepository;

	/*
	 * READ methods
	 */
	public Page<FinancialAccount> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("FinancialAccountService -> findAll FinancialAccounts");
		
		return financialaccountRepository.findAll(PageRequest.of(page, count));
	}

	public Iterable<FinancialAccount> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("FinancialAccountService -> findAll FinancialAccounts");
		
		return financialaccountRepository.findAll();
	}

	public Iterable<FinancialAccount> findByOwner(String owner){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving FinancialAccount for owner:" + owner);
		
		Iterable<FinancialAccount> accounts =  financialaccountRepository.findByOwner(owner);
		
//		for (FinancialAccount fa : accounts) {
//			Iterable<Accounttransaction> trans = accounttransactionRepository.findByFinancialAccount(fa.getAccountNumber());
//		}
		
		return accounts;
		
	}

	public FinancialAccount get(Long id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving FinancialAccount with id:" + id);
		
		FinancialAccount elementToGet = financialaccountRepository.findById(id).get();
		
		if (elementToGet == null)
			throw new FinancialAccountNotFoundException(id);
		
		return elementToGet;
	}


}

